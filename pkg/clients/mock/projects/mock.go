// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/crossplane-contrib/provider-argocd/pkg/clients/projects (interfaces: ProjectServiceClient)

// Package projects is a generated GoMock package.
package projects

import (
	context "context"
	reflect "reflect"

	project "github.com/argoproj/argo-cd/v2/pkg/apiclient/project"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockProjectServiceClient is a mock of ProjectServiceClient interface.
type MockProjectServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceClientMockRecorder
}

// MockProjectServiceClientMockRecorder is the mock recorder for MockProjectServiceClient.
type MockProjectServiceClientMockRecorder struct {
	mock *MockProjectServiceClient
}

// NewMockProjectServiceClient creates a new mock instance.
func NewMockProjectServiceClient(ctrl *gomock.Controller) *MockProjectServiceClient {
	mock := &MockProjectServiceClient{ctrl: ctrl}
	mock.recorder = &MockProjectServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectServiceClient) EXPECT() *MockProjectServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProjectServiceClient) Create(arg0 context.Context, arg1 *project.ProjectCreateRequest, arg2 ...grpc.CallOption) (*v1alpha1.AppProject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AppProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProjectServiceClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockProjectServiceClient) Delete(arg0 context.Context, arg1 *project.ProjectQuery, arg2 ...grpc.CallOption) (*project.EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*project.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectServiceClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockProjectServiceClient) Get(arg0 context.Context, arg1 *project.ProjectQuery, arg2 ...grpc.CallOption) (*v1alpha1.AppProject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AppProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProjectServiceClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProjectServiceClient)(nil).Get), varargs...)
}

// Update mocks base method.
func (m *MockProjectServiceClient) Update(arg0 context.Context, arg1 *project.ProjectUpdateRequest, arg2 ...grpc.CallOption) (*v1alpha1.AppProject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AppProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProjectServiceClientMockRecorder) Update(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectServiceClient)(nil).Update), varargs...)
}
